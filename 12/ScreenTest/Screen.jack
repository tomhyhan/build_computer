// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack
/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
 
class Screen {

    static int screenBase;
    static boolean paint;
    static Array twoToThe;
    static Array screen;
    
    /** Initializes the Screen. */
    function void init() {
        let screenBase = 16384;
        let paint = true;
        let screen = screenBase;

        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let paint = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int col, int row) {
        var int address, addr_pixels, pixel;

        let address = (32 * row) + (col / 16);
        // let addr_pixels = Memory.peek(screenBase + address);
        // let addr_pixels = screen[address];
        let pixel = twoToThe[col & 15];

        if (paint) {
            // let addr_pixels = addr_pixels | pixel;
            let screen[address] = screen[address] | pixel; 
        } else {
           // let addr_pixels = addr_pixels & ~pixel;
            let screen[address] = screen[address] & ~pixel; 
        } 

        // do Memory.poke(screenBase + address, addr_pixels);
        return; 
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x1 +a, y1 + b);

            if (diff > 0) {
                let a = a + 1;
                let diff = diff - dx;
            } else {
                let b = b + 1;
                let diff = diff + dy;
            }
        } 
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     *  and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
