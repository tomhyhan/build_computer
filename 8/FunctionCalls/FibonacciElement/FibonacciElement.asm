@256 // 0
D=A // 1
@SP // 2
M=D // 3
@Sys.initRET.0 // 4
D=A // 5
@SP // 6
A=M // 7
M=D // 8
@SP // 9
M=M+1 // 10
@LCL // 11
D=M // 12
@SP // 13
A=M // 14
M=D // 15
@SP // 16
M=M+1 // 17
@ARG // 18
D=M // 19
@SP // 20
A=M // 21
M=D // 22
@SP // 23
M=M+1 // 24
@THIS // 25
D=M // 26
@SP // 27
A=M // 28
M=D // 29
@SP // 30
M=M+1 // 31
@THAT // 32
D=M // 33
@SP // 34
A=M // 35
M=D // 36
@SP // 37
M=M+1 // 38
@5 // 39
D=A // 40
@SP // 41
D=M-D // 42
@ARG // 43
M=D // 44
@SP // 45
D=M // 46
@LCL // 47
M=D // 48
@Sys.init // 49
0;JMP // 50
(Sys.initRET.0) // 51
// function Main.fibonacci 0
(Main.fibonacci) // 52
// push argument 0
@0 // 53
D=A // 54
@ARG // 55
D=M+D // 56
A=D // 57
D=M // 58
@SP // 59
A=M // 60
M=D // 61
@SP // 62
M=M+1 // 63
// push constant 2
@2 // 64
D=A // 65
@SP // 66
A=M // 67
M=D // 68
@SP // 69
M=M+1 // 70
// lt
@SP // 71
M=M-1 // 72
@SP // 73
A=M // 74
D=M // 75
@SP // 76
M=M-1 // 77
@SP // 78
A=M // 79
D=M-D // 80
@CMP_TRUE_0 // 81
D;JLT // 82
@SP // 83
A=M // 84
M=0 // 85
@CMP_END_0 // 86
0;JMP // 87
(CMP_TRUE_0) // 88
@SP // 89
A=M // 90
M=-1 // 91
(CMP_END_0) // 92
@SP // 93
M=M+1 // 94
// if-goto N_LT_2
@SP // 95
M=M-1 // 96
@SP // 97
A=M // 98
D=M // 99
@Main:N_LT_2 // 100
D;JNE // 101
// goto N_GE_2
@Main:N_GE_2 // 102
0;JMP // 103
// label N_LT_2               // if n < 2 returns n
(Main:N_LT_2) // 104
// push argument 0
@0 // 105
D=A // 106
@ARG // 107
D=M+D // 108
A=D // 109
D=M // 110
@SP // 111
A=M // 112
M=D // 113
@SP // 114
M=M+1 // 115
// return
@LCL // 116
D=M // 117
@R13 // 118
M=D // 119
@5 // 120
D=A // 121
@R13 // 122
A=M-D // 123
D=M // 124
@R14 // 125
M=D // 126
@0 // 127
D=A // 128
@ARG // 129
D=M+D // 130
A=D // 131
D=A // 132
@R15 // 133
M=D // 134
@SP // 135
M=M-1 // 136
@SP // 137
A=M // 138
D=M // 139
@R15 // 140
A=M // 141
M=D // 142
@ARG // 143
D=M+1 // 144
@SP // 145
M=D // 146
@1 // 147
D=A // 148
@R13 // 149
A=M-D // 150
D=M // 151
@THAT // 152
M=D // 153
@2 // 154
D=A // 155
@R13 // 156
A=M-D // 157
D=M // 158
@THIS // 159
M=D // 160
@3 // 161
D=A // 162
@R13 // 163
A=M-D // 164
D=M // 165
@ARG // 166
M=D // 167
@4 // 168
D=A // 169
@R13 // 170
A=M-D // 171
D=M // 172
@LCL // 173
M=D // 174
@R14 // 175
A=M // 176
0;JMP // 177
// label N_GE_2               // if n >= 2 returns fib(n - 2) + fib(n - 1)
(Main:N_GE_2) // 178
// push argument 0
@0 // 179
D=A // 180
@ARG // 181
D=M+D // 182
A=D // 183
D=M // 184
@SP // 185
A=M // 186
M=D // 187
@SP // 188
M=M+1 // 189
// push constant 2
@2 // 190
D=A // 191
@SP // 192
A=M // 193
M=D // 194
@SP // 195
M=M+1 // 196
// sub
@SP // 197
M=M-1 // 198
@SP // 199
A=M // 200
D=M // 201
@SP // 202
M=M-1 // 203
@SP // 204
A=M // 205
M=M-D // 206
@SP // 207
M=M+1 // 208
// call Main.fibonacci 1  // computes fib(n - 2)
@Main.fibonacciRET.1 // 209
D=A // 210
@SP // 211
A=M // 212
M=D // 213
@SP // 214
M=M+1 // 215
@LCL // 216
D=M // 217
@SP // 218
A=M // 219
M=D // 220
@SP // 221
M=M+1 // 222
@ARG // 223
D=M // 224
@SP // 225
A=M // 226
M=D // 227
@SP // 228
M=M+1 // 229
@THIS // 230
D=M // 231
@SP // 232
A=M // 233
M=D // 234
@SP // 235
M=M+1 // 236
@THAT // 237
D=M // 238
@SP // 239
A=M // 240
M=D // 241
@SP // 242
M=M+1 // 243
@6 // 244
D=A // 245
@SP // 246
D=M-D // 247
@ARG // 248
M=D // 249
@SP // 250
D=M // 251
@LCL // 252
M=D // 253
@Main.fibonacci // 254
0;JMP // 255
(Main.fibonacciRET.1) // 256
// push argument 0
@0 // 257
D=A // 258
@ARG // 259
D=M+D // 260
A=D // 261
D=M // 262
@SP // 263
A=M // 264
M=D // 265
@SP // 266
M=M+1 // 267
// push constant 1
@1 // 268
D=A // 269
@SP // 270
A=M // 271
M=D // 272
@SP // 273
M=M+1 // 274
// sub
@SP // 275
M=M-1 // 276
@SP // 277
A=M // 278
D=M // 279
@SP // 280
M=M-1 // 281
@SP // 282
A=M // 283
M=M-D // 284
@SP // 285
M=M+1 // 286
// call Main.fibonacci 1  // computes fib(n - 1)
@Main.fibonacciRET.2 // 287
D=A // 288
@SP // 289
A=M // 290
M=D // 291
@SP // 292
M=M+1 // 293
@LCL // 294
D=M // 295
@SP // 296
A=M // 297
M=D // 298
@SP // 299
M=M+1 // 300
@ARG // 301
D=M // 302
@SP // 303
A=M // 304
M=D // 305
@SP // 306
M=M+1 // 307
@THIS // 308
D=M // 309
@SP // 310
A=M // 311
M=D // 312
@SP // 313
M=M+1 // 314
@THAT // 315
D=M // 316
@SP // 317
A=M // 318
M=D // 319
@SP // 320
M=M+1 // 321
@6 // 322
D=A // 323
@SP // 324
D=M-D // 325
@ARG // 326
M=D // 327
@SP // 328
D=M // 329
@LCL // 330
M=D // 331
@Main.fibonacci // 332
0;JMP // 333
(Main.fibonacciRET.2) // 334
// add                    // returns fib(n - 1) + fib(n - 2)
@SP // 335
M=M-1 // 336
@SP // 337
A=M // 338
D=M // 339
@SP // 340
M=M-1 // 341
@SP // 342
A=M // 343
M=M+D // 344
@SP // 345
M=M+1 // 346
// return
@LCL // 347
D=M // 348
@R13 // 349
M=D // 350
@5 // 351
D=A // 352
@R13 // 353
A=M-D // 354
D=M // 355
@R14 // 356
M=D // 357
@0 // 358
D=A // 359
@ARG // 360
D=M+D // 361
A=D // 362
D=A // 363
@R15 // 364
M=D // 365
@SP // 366
M=M-1 // 367
@SP // 368
A=M // 369
D=M // 370
@R15 // 371
A=M // 372
M=D // 373
@ARG // 374
D=M+1 // 375
@SP // 376
M=D // 377
@1 // 378
D=A // 379
@R13 // 380
A=M-D // 381
D=M // 382
@THAT // 383
M=D // 384
@2 // 385
D=A // 386
@R13 // 387
A=M-D // 388
D=M // 389
@THIS // 390
M=D // 391
@3 // 392
D=A // 393
@R13 // 394
A=M-D // 395
D=M // 396
@ARG // 397
M=D // 398
@4 // 399
D=A // 400
@R13 // 401
A=M-D // 402
D=M // 403
@LCL // 404
M=D // 405
@R14 // 406
A=M // 407
0;JMP // 408
// function Sys.init 0
(Sys.init) // 409
// push constant 4
@4 // 410
D=A // 411
@SP // 412
A=M // 413
M=D // 414
@SP // 415
M=M+1 // 416
// call Main.fibonacci 1
@Main.fibonacciRET.3 // 417
D=A // 418
@SP // 419
A=M // 420
M=D // 421
@SP // 422
M=M+1 // 423
@LCL // 424
D=M // 425
@SP // 426
A=M // 427
M=D // 428
@SP // 429
M=M+1 // 430
@ARG // 431
D=M // 432
@SP // 433
A=M // 434
M=D // 435
@SP // 436
M=M+1 // 437
@THIS // 438
D=M // 439
@SP // 440
A=M // 441
M=D // 442
@SP // 443
M=M+1 // 444
@THAT // 445
D=M // 446
@SP // 447
A=M // 448
M=D // 449
@SP // 450
M=M+1 // 451
@6 // 452
D=A // 453
@SP // 454
D=M-D // 455
@ARG // 456
M=D // 457
@SP // 458
D=M // 459
@LCL // 460
M=D // 461
@Main.fibonacci // 462
0;JMP // 463
(Main.fibonacciRET.3) // 464
// label END
(Sys:END) // 465
// goto END  // loops infinitely
@Sys:END // 466
0;JMP // 467
