// push constant 0
@0 // 0
D=A // 1
@SP // 2
A=M // 3
M=D // 4
@SP // 5
M=M+1 // 6
// pop local 0         // sum = 0
@0 // 7
D=A // 8
@LCL // 9
D=M+D // 10
A=D // 11
D=A // 12
@R13 // 13
M=D // 14
@SP // 15
M=M-1 // 16
@SP // 17
A=M // 18
D=M // 19
@R13 // 20
A=M // 21
M=D // 22
// label LOOP
(BasicLoop:LOOP) // 23
// push argument 0
@0 // 24
D=A // 25
@ARG // 26
D=M+D // 27
A=D // 28
D=M // 29
@SP // 30
A=M // 31
M=D // 32
@SP // 33
M=M+1 // 34
// push local 0
@0 // 35
D=A // 36
@LCL // 37
D=M+D // 38
A=D // 39
D=M // 40
@SP // 41
A=M // 42
M=D // 43
@SP // 44
M=M+1 // 45
// add
@SP // 46
M=M-1 // 47
@SP // 48
A=M // 49
D=M // 50
@SP // 51
M=M-1 // 52
@SP // 53
A=M // 54
M=M+D // 55
@SP // 56
M=M+1 // 57
// pop local 0	        // sum = sum + n
@0 // 58
D=A // 59
@LCL // 60
D=M+D // 61
A=D // 62
D=A // 63
@R13 // 64
M=D // 65
@SP // 66
M=M-1 // 67
@SP // 68
A=M // 69
D=M // 70
@R13 // 71
A=M // 72
M=D // 73
// push argument 0
@0 // 74
D=A // 75
@ARG // 76
D=M+D // 77
A=D // 78
D=M // 79
@SP // 80
A=M // 81
M=D // 82
@SP // 83
M=M+1 // 84
// push constant 1
@1 // 85
D=A // 86
@SP // 87
A=M // 88
M=D // 89
@SP // 90
M=M+1 // 91
// sub
@SP // 92
M=M-1 // 93
@SP // 94
A=M // 95
D=M // 96
@SP // 97
M=M-1 // 98
@SP // 99
A=M // 100
M=M-D // 101
@SP // 102
M=M+1 // 103
// pop argument 0      // n--
@0 // 104
D=A // 105
@ARG // 106
D=M+D // 107
A=D // 108
D=A // 109
@R13 // 110
M=D // 111
@SP // 112
M=M-1 // 113
@SP // 114
A=M // 115
D=M // 116
@R13 // 117
A=M // 118
M=D // 119
// push argument 0
@0 // 120
D=A // 121
@ARG // 122
D=M+D // 123
A=D // 124
D=M // 125
@SP // 126
A=M // 127
M=D // 128
@SP // 129
M=M+1 // 130
// if-goto LOOP        // if n > 0, goto LOOP
@SP // 131
M=M-1 // 132
@SP // 133
A=M // 134
D=M // 135
@BasicLoop:LOOP // 136
D;JNE // 137
// push local 0        // else, pushes sum to the stack's top
@0 // 138
D=A // 139
@LCL // 140
D=M+D // 141
A=D // 142
D=M // 143
@SP // 144
A=M // 145
M=D // 146
@SP // 147
M=M+1 // 148
